@model SocialNetwork.Models.ViewModels.Account.ChatViewModel


<div class="block-reg background-white">
    <div>
        <form method="get" asp-controller="AccountManager" asp-action="MyPage">
            <input class="enter_submit" type="submit" value="Назад" />
        </form>
    </div>

    <h4 class="center">Чат @Model.You.FirstName и  @Model.ToWhom.FirstName</h4>

    <div class="lined-block">
        <div id="messageBlock" class="lined-block">
            <label class="gray-text">Сообщения</label>

            @if (Model.History.Count != 0) {
                @foreach (var message in Model.History) {
                    <div>
                        <label>@message.Sender.FirstName:</label>
                        @message.Text
                    </div>
                }
            }
            else {
                <div>
                    <label>У вас пока нет сообщений с @Model.ToWhom.GetFullName().</label>
                </div>
            }
        </div>
    </div>

    <div class="lined-block">
        <label class="gray-text">Новое сообщение</label>

        <form class="frm" id="messageForm" method="post" asp-controller="AccountManager" asp-action="NewMessage" asp-route-id="@Model.ToWhom.Id">
            <div asp-validation-summary="ModelOnly"></div>
            <div>
                <div class="mrgn">
                    <input asp-for="NewMessage.Text" class="form-control emojify" type="text" />
                </div>
                <div class="center">
                    <input class="btn_submit" type="submit" value="Отправить" />
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.17.0/jquery.validate.min.js"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.validation.unobtrusive/3.2.10/jquery.validate.unobtrusive.min.js"></script>
    <script>
        // Add an event handler for the form submission
        document.getElementById('messageForm').addEventListener('submit', function (event) {
            event.preventDefault(); // Prevent the default form submission

            // Get the form data
            var formData = new FormData(this);

            // Send a POST request to the server
            fetch('/NewMessage?id=@Model.ToWhom.Id', {
                method: 'POST',
                body: formData
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(data => {
                    // Handle the response data here
                    //console.log(data);
                    console.log("OK");
                    location.reload();
                })
                .catch(error => {
                    // Handle errors here
                    console.error('There was a problem with the fetch operation:', error);
                });
        });

        function refreshMessages() {
            // Отправьте запрос на сервер для загрузки новых сообщений
            fetch('/LoadMessages?id=@Model.ToWhom.Id')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(data => {
                    // Обновите содержимое блока сообщений
                    document.getElementById('messageBlock').innerHTML = data;
                })
                .catch(error => {
                    // Обработка ошибок
                    console.error('There was a problem with the fetch operation:', error);
                });
        }


        setInterval(refreshMessages, 5000)
    </script>
}
